openapi: 3.0.0
info:
  title: "Irish Pub"
  description: "API for Irish Pub"
  version: 1.0.0
servers:
  - url: localhost:8080/api/v1
    description: "Local server"
paths:
  /customers/{id}/info:
    post:
      summary: "Method to attach personal information to customer with id"
      tags:
        - Customer
        - Personal Info
      operationId: attachPersonalInfo
      parameters:
        - name: id
          in: path
          required: true
          description: "Customer's id"
          schema:
            type: integer
            format: int32
      requestBody:
        description: "Personal info to be attached"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalInformation'
      responses:
        '401':
          description: "Unauthorized access to personal information manipulation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: "Not enough rights to perform attach operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: "Customer already have attached personal info"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '201':
          description: "Personal info is attached"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    delete:
      summary: "Method to detach personal information from customer with id"
      tags:
        - Customer
        - Personal Info
      operationId: detachPersonalInfo
      parameters:
        - name: id
          in: path
          required: true
          description: "Customer's id"
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: "Unauthorized access to personal information manipulation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: "Not enough rights to perform detach operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '410':
          description: "Personal info is already detached"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '204':
          description: "Personal info is detached"
  /customers/{id}:
    get:
      summary: "Method to retrieve customer by id"
      tags:
        - Customer
      operationId: getCustomerById
      parameters:
        - name: id
          in: path
          required: true
          description: "Customer's id"
          schema:
            type: integer
            format: int32
      responses:
        '404':
          description: "Customer not found by id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '200':
          description: "Customer found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    delete:
      summary: "Method to delete customer by id"
      tags:
        - Customer
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          required: true
          description: "Customer's id"
          schema:
            type: integer
            format: int32
      responses:
        '410':
          description: "Customer with such id already deleted"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '204':
          description: "Customer deleted"
    put:
      summary: "Method to update customer by id"
      tags:
        - Customer
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          required: true
          description: "Customer's id"
          schema:
            type: integer
            format: int32
      requestBody:
        description: "Customer to be updated"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '404':
          description: "Customer not found by id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '200':
          description: "Customer updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
  /customers:
    post:
      summary: "Method to create new customer"
      tags:
        - Customer
      operationId: createCustomer
      requestBody:
        description: "Customer to be added (only name, surname and birth date will be used)"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '400':
          description: "Validation error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: "Customer already exist, customer should have unique name, surname and birth date (all together)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '201':
          description: "New customer is successfully created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    get:
      summary: "Method to retrieve all users by fiter with pagination"
      tags:
        - Customer
      operationId: getAllCustomers
      parameters:
        - name: filterName
          in: query
          description: "Name to filter by"
          schema: 
            type: string
        - name: filterSurname
          in: query
          description: "Surname to filter by"
          schema:
            type: string
        - name: filterBirthDate
          in: query
          description: "Birth date to filter by"
          schema:
            type: string
            format: date
        - name: page
          in: query
          description: "Number of page to return"
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: "Size of page to return"
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: "Successful answer with list (page) of filtered customers"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
components:
  schemas:
    Error:
      type: object
      required:
        - details
      properties:
        details:
          type: string
          example: "Customer not found"
    PersonalInformation:
      type: object
      required:
        - id
        - phoneNumber
        - email
        - street
        - houseNumber
      properties:
        id:
          type: integer
          format: int32
          example: 1
        phoneNumber:
          type: string
          example: "+420776652781"
        email:
          type: string
          example: "mast.pupt@examle.com"
        street:
          type: string
          example: "Gegerina"
        houseNumber:
          type: integer
          format: int32
          example: 12
    Customer:
      type: object
      required:
        - name
        - surname
        - birthDate
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: "John"
        surname:
          type: string
          example: "Gegerin"
        birthDate:
          type: string
          format: date
          example: "2003-08-14"
        discountCardNumber:
          type: integer
          format: int64
          example: 5788847644
        personalInformation:
          $ref: '#/components/schemas/PersonalInformation'